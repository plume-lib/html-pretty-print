plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/html-pretty-print-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '5.2.0'

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id 'com.github.sherter.google-java-format' version '0.7.1'

  // Error Prone linter
  id("net.ltgt.errorprone") version "1.1.1"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.4.10' apply false
}

repositories {
    mavenCentral()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/org.ccil.cowan.tagsoup/tagsoup
    implementation group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'

    // https://mvnrepository.com/artifact/xom/xom
    implementation group: 'xom', name: 'xom', version: '1.3.2'

    errorprone 'com.google.errorprone:error_prone_core:2.3.4'
}

mainClassName = 'org.plumelib.htmlprettyprint.HtmlPrettyPrint'

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.3.4")
  // JDK 8 support for Error Prone:
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all" << "-Werror"
  options.errorprone {
    disable("ReferenceEquality") // Use Interning Checker instead.
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}

// To use a local-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
    checkerFrameworkAnnotatedJDK files(cfHome + "/checker/dist/jdk8.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
}

dependencies {
  compileOnly group: 'org.plumelib', name: 'require-javadoc', version: '0.1.2'
}
task requireJavadoc(type: Javadoc) {
  description = 'Ensures that Javadoc documentation exists.'
  destinationDir.deleteDir()
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.compileClasspath as List
  options.doclet = "org.plumelib.javadoc.RequireJavadoc"
}
check.dependsOn requireJavadoc

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
